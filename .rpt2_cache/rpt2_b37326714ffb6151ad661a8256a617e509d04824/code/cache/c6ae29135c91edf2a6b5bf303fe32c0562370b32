{
  "code": "import HttpUtil from \"../utils/HttpUtil\";\r\nimport Api from \"./Api\";\r\nimport UserData from \"./UserData\";\r\nimport StaticData from \"./StaticData\";\r\nimport ConfigData from \"../config/ConfigData\";\r\nimport GamePlatform from \"../adapter/GamePlatform\";\r\nexport default class GameHttp {\r\n    constructor() {\r\n        this.getTime = 0;\r\n        this.maxGetTime = 3;\r\n        this.isMisleadTime = 0;\r\n        this.isRequiered = false;\r\n        GameHttp._instance = this;\r\n    }\r\n    static get Instance() {\r\n        if (!GameHttp._instance)\r\n            new GameHttp();\r\n        return GameHttp._instance;\r\n    }\r\n    login() {\r\n        if (Laya.Browser.onWeiXin || Laya.Browser.onQQMiniGame) {\r\n            this.getTime++;\r\n            GamePlatform.platform.login({\r\n                success: res => {\r\n                    console.log(\"login res:\", res);\r\n                    if (res.code) {\r\n                        UserData.Code = res.code;\r\n                        let obj = GamePlatform.platform.getLaunchOptionsSync();\r\n                        let _AppID = \"0\";\r\n                        let Sence = obj.scene;\r\n                        if (obj.query == undefined || obj.query == null) {\r\n                            Sence = \"0\";\r\n                        }\r\n                        else {\r\n                            if (obj.query.scene == undefined || obj.query == null) {\r\n                                Sence = \"0\";\r\n                            }\r\n                            else {\r\n                                Sence = obj.query.scene;\r\n                            }\r\n                        }\r\n                        let _Sence = decodeURIComponent(Sence);\r\n                        this.getTime = 0;\r\n                        this.loginPath = Api.loginUrl + \"&version=\" + ConfigData.version + \"&code=\" + res.code + \"&scene=\" + _Sence + \"&uid=\" + _AppID;\r\n                        this.loginToService();\r\n                    }\r\n                },\r\n                fail: err => {\r\n                    if (this.getTime < this.maxGetTime) {\r\n                        this.login();\r\n                    }\r\n                    else {\r\n                        console.log(\"login fail\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            console.log(\"请在微信开发工具上调试\");\r\n        }\r\n    }\r\n    loginToService() {\r\n        this.getTime++;\r\n        HttpUtil.request({\r\n            url: this.loginPath,\r\n            method: \"get\",\r\n            complete: res => {\r\n                this.getTime = 0;\r\n                UserData.OpenId = res.data.openid;\r\n                UserData.setOpenUser();\r\n                GameHttp.Instance.getLeadOut();\r\n                GameHttp.Instance.isMislead();\r\n                console.log(\"后台登录成功:\", res);\r\n            },\r\n            error: err => {\r\n                if (this.getTime < this.maxGetTime) {\r\n                    this.loginToService();\r\n                }\r\n                else {\r\n                    console.log(\"后台登录失败\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getLeadOut() {\r\n        console.log(\"后台获取游戏列表\");\r\n        if (UserData.OpenId) {\r\n            this.getTime++;\r\n            let path = Api.gameListUrl + \"&openid=\" + UserData.OpenId + \"&version=\" + ConfigData.version;\r\n            HttpUtil.request({\r\n                url: path,\r\n                method: \"get\",\r\n                complete: res => {\r\n                    if (res.result_code == 1) {\r\n                        StaticData.gameList = res.data.gamelist;\r\n                        console.log(\"网络游戏列表加载成功\");\r\n                    }\r\n                },\r\n                error: err => {\r\n                    if (this.getTime < this.maxGetTime) {\r\n                        this.getLeadOut();\r\n                    }\r\n                    else {\r\n                        console.log(\"后台 获取游戏列表  请求失败\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    isMislead() {\r\n        if (UserData.OpenId) {\r\n            this.isMisleadTime++;\r\n            let path = Api.misleadUrl + \"&openid=\" + UserData.OpenId + \"&version=\" + ConfigData.version;\r\n            HttpUtil.request({\r\n                url: path,\r\n                method: \"get\",\r\n                complete: res => {\r\n                    StaticData.isMisLead = res.data.casualClick == \"1\";\r\n                    console.info(\"isMislead:\", StaticData.isMisLead);\r\n                },\r\n                error: err => {\r\n                    if (this.isMisleadTime < this.maxGetTime) {\r\n                        this.isMislead();\r\n                    }\r\n                    else {\r\n                        console.log(\"后台 获取是否误点  请求失败\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    leadOut(id) {\r\n        if (UserData.OpenId) {\r\n            let path = Api.leadOutUrl + \"&openid=\" + UserData.OpenId + \"&version=\" + ConfigData.version + \"&id=\" + id;\r\n            HttpUtil.request({\r\n                url: path,\r\n                method: \"get\",\r\n                complete: res => {\r\n                },\r\n                error: err => {\r\n                    console.info(\"leadOut.error\", err);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    leadOutSuccess(id) {\r\n        if (UserData.OpenId) {\r\n            let path = Api.leadOutSuccessUrl + \"&openid=\" + UserData.OpenId + \"&version=\" + ConfigData.version + \"&id=\" + id;\r\n            HttpUtil.request({\r\n                url: path,\r\n                method: \"get\",\r\n                complete: res => {\r\n                },\r\n                error: err => {\r\n                    console.info(\"leadOutSuccess.error\", err);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    startGame() {\r\n        if (UserData.OpenId) {\r\n            let path = Api.startGameUrl + \"&openid=\" + UserData.OpenId + \"&version=\" + ConfigData.version;\r\n            HttpUtil.request({\r\n                url: path,\r\n                method: \"get\",\r\n                complete: res => {\r\n                    StaticData.game_id = res.data.id;\r\n                },\r\n                error: err => {\r\n                    console.info(\"startGame.error\", err);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    endGame() {\r\n        if (UserData.OpenId) {\r\n            if (!this.isRequiered) {\r\n                console.log(\"requier\");\r\n                this.isRequiered = true;\r\n            }\r\n            let path = Api.endGameUrl + \"&openid=\" + UserData.OpenId + \"&version=\" + ConfigData.version + \"&id=\" + StaticData.game_id + \"&level=\" + (StaticData.level + 1);\r\n            HttpUtil.request({\r\n                url: path,\r\n                method: \"get\",\r\n                complete: res => {\r\n                },\r\n                error: err => {\r\n                    console.info(\"endGame.error\", err);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "E:/LayaModle/melee/src/utils/HttpUtil.ts",
    "E:/LayaModle/melee/src/data/Api.ts",
    "E:/LayaModle/melee/src/data/UserData.ts",
    "E:/LayaModle/melee/src/data/StaticData.ts",
    "E:/LayaModle/melee/src/config/ConfigData.ts",
    "E:/LayaModle/melee/src/manages/Loading.ts",
    "E:/LayaModle/melee/src/manages/dialogManage/StartDialogManage.ts",
    "E:/LayaModle/melee/src/manages/GameManage.ts",
    "E:/LayaModle/melee/src/utils/LocalStorageUtil.ts",
    "E:/LayaModle/melee/src/utils/AldUtil.ts",
    "E:/LayaModle/melee/src/adapter/GamePlatform.ts"
  ]
}
